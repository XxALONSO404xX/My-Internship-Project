"""Group Vulnerability Service for IoT Platform"""
import logging
from typing import Dict, List, Any, Optional
from datetime import datetime
from sqlalchemy.ext.asyncio import AsyncSession

from app.services.vulnerability_scanner import VulnerabilityScanner
from app.services.group_service import GroupService

logger = logging.getLogger(__name__)

class GroupVulnerabilityService:
    """Service for scanning groups of devices for vulnerabilities"""
    
    def __init__(self, db: AsyncSession):
        self.db = db
        self.vulnerability_scanner = VulnerabilityScanner(db)
        self.group_service = GroupService(db)
    
    async def scan_group(self, group_id: int) -> Dict[str, Any]:
        """Scan all devices in a group for vulnerabilities"""
        # Verify group exists
        group = await self.group_service.get_group_by_id(group_id)
        if not group:
            return {
                "status": "failed",
                "message": f"Group with ID {group_id} not found"
            }
        
        # Get all devices in the group
        devices = await self.group_service.get_devices_in_group(group_id)
        
        if not devices:
            return {
                "status": "info",
                "message": f"No devices found in group {group.name} (ID: {group_id})",
                "group_id": group_id,
                "group_name": group.name
            }
        
        # Extract device hash_ids
        device_ids = [device.hash_id for device in devices]
        
        # Start a vulnerability scan for these devices
        scan_result = await self.vulnerability_scanner.scan_multiple_devices(device_ids)
        
        # Add group information to the result
        scan_result["group_id"] = group_id
        scan_result["group_name"] = group.name
        scan_result["group_type"] = group.group_type
        
        return scan_result
    
    async def get_group_vulnerability_stats(self, group_id: int) -> Dict[str, Any]:
        """Get vulnerability statistics for a group"""
        # Verify group exists
        group = await self.group_service.get_group_by_id(group_id)
        if not group:
            return {
                "status": "failed",
                "message": f"Group with ID {group_id} not found"
            }
        
        # Get all devices in the group
        devices = await self.group_service.get_devices_in_group(group_id)
        
        if not devices:
            return {
                "status": "info",
                "message": f"No devices found in group {group.name} (ID: {group_id})",
                "group_id": group_id,
                "group_name": group.name,
                "device_count": 0,
                "vulnerability_stats": {}
            }
        
        # Calculate vulnerability statistics from each device's latest vulnerability scan
        total_devices = len(devices)
        devices_with_vulnerabilities = 0
        vulnerability_counts = {
            "critical": 0,
            "high": 0,
            "medium": 0,
            "low": 0
        }
        
        # Here we would normally query the database for actual vulnerability data
        # For now, we'll return mock statistics
        devices_with_vulnerabilities = total_devices // 2
        vulnerability_counts = {
            "critical": total_devices // 10,
            "high": total_devices // 5,
            "medium": total_devices // 3,
            "low": total_devices // 2
        }
        
        # Calculate risk score based on vulnerabilities
        risk_score = (
            (vulnerability_counts["critical"] * 10.0) +
            (vulnerability_counts["high"] * 7.5) +
            (vulnerability_counts["medium"] * 5.0) +
            (vulnerability_counts["low"] * 2.5)
        ) / max(1, total_devices)
        
        return {
            "status": "success",
            "group_id": group_id,
            "group_name": group.name,
            "group_type": group.group_type,
            "device_count": total_devices,
            "devices_with_vulnerabilities": devices_with_vulnerabilities,
            "vulnerability_counts": vulnerability_counts,
            "risk_score": min(10.0, risk_score),
            "last_scan_date": datetime.utcnow().isoformat()
        }

# Factory function
def create_group_vulnerability_service(db: AsyncSession):
    """Create a group vulnerability service with the given database session"""
    return GroupVulnerabilityService(db)
